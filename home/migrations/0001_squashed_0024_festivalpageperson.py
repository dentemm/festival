# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-04-13 10:53
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import modelcluster.contrib.taggit
import modelcluster.fields
import taggit.managers
import wagtail.wagtailadmin.taggable
import wagtail.wagtailcore.blocks
import wagtail.wagtailcore.fields
import wagtail.wagtailcore.models
import wagtail.wagtailimages.blocks
import wagtail.wagtailimages.models


class Migration(migrations.Migration):

    replaces = [('home', '0001_initial'), ('home', '0002_auto_20160406_2007'), ('home', '0003_auto_20160407_0652'), ('home', '0004_homepage'), ('home', '0005_homepage_test'), ('home', '0006_commentwithtitlesnippet'), ('home', '0007_testsnippet'), ('home', '0008_auto_20160411_1013'), ('home', '0009_auto_20160412_2100'), ('home', '0010_auto_20160412_2122'), ('home', '0011_auto_20160413_0808'), ('home', '0012_orderabletest_test'), ('home', '0013_auto_20160413_0826'), ('home', '0014_orderabletest'), ('home', '0015_adresorderable'), ('home', '0016_location2'), ('home', '0017_auto_20160413_0835'), ('home', '0018_location2'), ('home', '0019_auto_20160413_0841'), ('home', '0020_location2'), ('home', '0021_auto_20160413_1241'), ('home', '0022_festivalpageperson'), ('home', '0023_auto_20160413_1246'), ('home', '0024_festivalpageperson')]

    initial = True

    dependencies = [
        ('comments', '0002_auto_20160411_1006'),
        ('wagtailforms', '0003_capitalizeverbose'),
        ('wagtailimages', '0012_copy_image_permissions_to_collections'),
        ('wagtailcore', '0028_merge'),
        ('taggit', '0002_auto_20150616_2121'),
        ('wagtailredirects', '0005_capitalizeverbose'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(max_length=40, verbose_name='stad')),
                ('postal_code', models.CharField(max_length=8, null=True, verbose_name='postcode')),
                ('street', models.CharField(max_length=40, null=True, verbose_name='straat')),
                ('number', models.CharField(max_length=8, null=True, verbose_name='nummer')),
                ('country', django_countries.fields.CountryField(default='BE', max_length=2, null=True, verbose_name='land')),
            ],
            options={
                'verbose_name': 'adres',
                'verbose_name_plural': 'adressen',
            },
        ),
        migrations.CreateModel(
            name='FestivalImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_primary', models.BooleanField(default=False, verbose_name='hoofdafbeelding')),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='afbeelding')),
            ],
        ),
        migrations.CreateModel(
            name='FestivalIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='FestivalLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FestivalPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('name', models.CharField(default='', max_length=40, unique=True, verbose_name='Festival naam')),
                ('description', wagtail.wagtailcore.fields.RichTextField(blank=True, default='', verbose_name='Festival promo tekst')),
                ('date', models.DateField(null=True, verbose_name='Festival datum')),
                ('duration', models.PositiveIntegerField(default=1, verbose_name='Duur (# dagen)')),
                ('website', models.URLField(blank=True, max_length=120, null=True)),
            ],
            options={
                'verbose_name': 'Festival',
                'ordering': ['-date'],
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='FestivalPageRateableAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=27)),
            ],
            options={
                'verbose_name': 'Beoordeelbaar kenmerk',
                'verbose_name_plural': 'Beoordeelbare kenmerken',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FestivalPageRatebleAttributeValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='rateable_attributes', to='home.FestivalPage')),
                ('rateable_attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='home.FestivalPageRateableAttribute', unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='FestivalPageTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='home.FestivalPage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='home_festivalpagetag_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=28, verbose_name='locatie naam')),
                ('longitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('address', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='location', to='home.Address', verbose_name='adres')),
            ],
            options={
                'verbose_name': 'locatie',
                'verbose_name_plural': 'locaties',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=28, verbose_name='naam')),
                ('last_name', models.CharField(blank=True, max_length=64, verbose_name='familienaam')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email adres')),
                ('phone', models.CharField(blank=True, max_length=28, null=True, verbose_name='telefoonnummer')),
            ],
            options={
                'verbose_name': 'persoon',
                'verbose_name_plural': 'personen',
                'ordering': ['last_name'],
            },
        ),
        migrations.AddField(
            model_name='festivalpage',
            name='contact_person',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='festivals', to='home.Person'),
        ),
        migrations.AddField(
            model_name='festivalpage',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='festivals', to='home.Location'),
        ),
        migrations.AddField(
            model_name='festivalpage',
            name='main_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image'),
        ),
        migrations.AddField(
            model_name='festivalpage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='home.FestivalPageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='festivallocation',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.Location'),
        ),
        migrations.AddField(
            model_name='festivallocation',
            name='page',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='home.FestivalPage'),
        ),
        migrations.AddField(
            model_name='festivalimage',
            name='page',
            field=modelcluster.fields.ParentalKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='home.FestivalPage'),
        ),
        migrations.CreateModel(
            name='HomePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('body', wagtail.wagtailcore.fields.StreamField((('carousel', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.StructBlock((('image', wagtail.wagtailimages.blocks.ImageChooserBlock()), ('caption', wagtail.wagtailcore.blocks.TextBlock(required=False)))), icon='image', template='home/blocks/carousel.html')),), null=True)),
                ('test', wagtail.wagtailcore.fields.RichTextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Startpagina',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='CommentSnippet',
            fields=[
                ('commentwithtitle_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='comments.CommentWithTitle')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'comment',
                'permissions': [('can_moderate', 'Can moderate comments')],
                'verbose_name_plural': 'comments',
                'ordering': ('submit_date',),
            },
            bases=('comments.commentwithtitle',),
        ),
        migrations.CreateModel(
            name='CustomImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('file', models.ImageField(height_field='height', upload_to=wagtail.wagtailimages.models.get_upload_to, verbose_name='file', width_field='width')),
                ('width', models.IntegerField(editable=False, verbose_name='width')),
                ('height', models.IntegerField(editable=False, verbose_name='height')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('focal_point_x', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_y', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_width', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_height', models.PositiveIntegerField(blank=True, null=True)),
                ('file_size', models.PositiveIntegerField(editable=False, null=True)),
                ('author', models.CharField(blank=True, max_length=56, null=True)),
                ('collection', models.ForeignKey(default=wagtail.wagtailcore.models.get_root_collection_id, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailcore.Collection', verbose_name='collection')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text=None, through='taggit.TaggedItem', to='taggit.Tag', verbose_name='tags')),
                ('uploaded_by_user', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='uploaded by user')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, wagtail.wagtailadmin.taggable.TagSearchable),
        ),
        migrations.CreateModel(
            name='CustomRendition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.ImageField(height_field='height', upload_to='images', width_field='width')),
                ('width', models.IntegerField(editable=False)),
                ('height', models.IntegerField(editable=False)),
                ('focal_point_key', models.CharField(blank=True, default='', editable=False, max_length=255)),
                ('filter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Filter')),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='renditions', to='home.CustomImage')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='customrendition',
            unique_together=set([('image', 'filter', 'focal_point_key')]),
        ),
        migrations.AlterField(
            model_name='customimage',
            name='author',
            field=models.CharField(blank=True, max_length=56, null=True, verbose_name='auteur'),
        ),
        migrations.CreateModel(
            name='OrderableTest',
            fields=[
                ('location_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='home.Location')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='locaties', to='home.FestivalPage')),
            ],
            options={
                'abstract': False,
                'ordering': ['sort_order'],
            },
            bases=('home.location', models.Model),
        ),
        migrations.CreateModel(
            name='AdresOrderable',
            fields=[
                ('address_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='home.Address')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='adresorderable', to='home.FestivalPage')),
            ],
            options={
                'abstract': False,
                'ordering': ['sort_order'],
            },
            bases=('home.address', models.Model),
        ),
        migrations.CreateModel(
            name='FestivalPagePerson',
            fields=[
                ('person_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='home.Person')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='persons', to='home.FestivalPage')),
            ],
            options={
                'abstract': False,
                'ordering': ['sort_order'],
            },
            bases=('home.person', models.Model),
        ),
    ]
